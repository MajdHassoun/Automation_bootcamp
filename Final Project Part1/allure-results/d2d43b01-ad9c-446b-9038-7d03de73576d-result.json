{"name": "test_make_and_save_to_list", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=127.0.6533.73)\nStacktrace:\n\tGetHandleVerifier [0x0100F653+11395]\n\t(No symbol) [0x00FEB7A4]\n\t(No symbol) [0x00F31A43]\n\t(No symbol) [0x00F0DE83]\n\t(No symbol) [0x00F9D48F]\n\t(No symbol) [0x00FAFD56]\n\t(No symbol) [0x00F96F36]\n\t(No symbol) [0x00F6A276]\n\t(No symbol) [0x00F6AECD]\n\tGetHandleVerifier [0x01112403+1071667]\n\tGetHandleVerifier [0x0111C9C4+1114100]\n\tGetHandleVerifier [0x011154B2+1084130]\n\tGetHandleVerifier [0x0103013B+145259]\n\t(No symbol) [0x00FF1693]\n\t(No symbol) [0x00FEEFB8]\n\t(No symbol) [0x00FEF157]\n\t(No symbol) [0x00FE842E]\n\tBaseThreadInitThunk [0x76FB7BA9+25]\n\tRtlInitializeExceptionChain [0x77BEC10B+107]\n\tRtlClearBits [0x77BEC08F+191]", "trace": "self = <test.list_save_test.ListSaveTest testMethod=test_make_and_save_to_list>\n\n    def setUp(self):\n        # Arrange\n        self.browser = BrowserWrapper()\n        self.config = ConfigProvider.load_config_json()\n        self.driver = self.browser.get_driver(self.config[\"url\"])\n        self.home_page = HomePage(self.driver)\n>       self.home_page.refresh_page()\n\ntest\\list_save_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ninfra\\base_page.py:6: in refresh_page\n    self._driver.refresh()\n..\\..\\Final Project Part1\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:577: in refresh\n    self.execute(Command.REFRESH)\n..\\..\\Final Project Part1\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000219E4982880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x76FB7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77BEC10B+107]\\\\n\\\\tRtlClearBits [0x77BEC08F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=127.0.6533.73)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0100F653+11395]\nE       \t(No symbol) [0x00FEB7A4]\nE       \t(No symbol) [0x00F31A43]\nE       \t(No symbol) [0x00F0DE83]\nE       \t(No symbol) [0x00F9D48F]\nE       \t(No symbol) [0x00FAFD56]\nE       \t(No symbol) [0x00F96F36]\nE       \t(No symbol) [0x00F6A276]\nE       \t(No symbol) [0x00F6AECD]\nE       \tGetHandleVerifier [0x01112403+1071667]\nE       \tGetHandleVerifier [0x0111C9C4+1114100]\nE       \tGetHandleVerifier [0x011154B2+1084130]\nE       \tGetHandleVerifier [0x0103013B+145259]\nE       \t(No symbol) [0x00FF1693]\nE       \t(No symbol) [0x00FEEFB8]\nE       \t(No symbol) [0x00FEF157]\nE       \t(No symbol) [0x00FE842E]\nE       \tBaseThreadInitThunk [0x76FB7BA9+25]\nE       \tRtlInitializeExceptionChain [0x77BEC10B+107]\nE       \tRtlClearBits [0x77BEC08F+191]\n\n..\\..\\Final Project Part1\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": " This test searches for a book, clicks on \"Save to list\" button, creates the list,\n        and make sure that the list is present in \"Lists\" page ", "start": 1722105398121, "stop": 1722105400784, "uuid": "0c212c06-8eda-4c13-ac95-8250e16ecd9b", "historyId": "f1ba5ae7f14e1eba367e9e88abb4a956", "testCaseId": "f1ba5ae7f14e1eba367e9e88abb4a956", "fullName": "test.list_save_test.ListSaveTest#test_make_and_save_to_list", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "list_save_test"}, {"name": "subSuite", "value": "ListSaveTest"}, {"name": "host", "value": "MajdHassoun"}, {"name": "thread", "value": "26964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.list_save_test"}]}