{"name": "test_search_book", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test.book_search_test.BookSearchTest testMethod=test_search_book>\n\n    def test_search_book(self):\n        \"\"\" This test searches for a book and checks if the book title is\n        present in the book's page\"\"\"\n        logging.info(\"Test test_search_book STARTED\")\n        # Arrange\n        self.home_page.search_book_flow(self.config[\"book_name1\"])\n        results_page = SearchResultsPage(self.driver)\n        results_page.click_first_result()\n        book_page = BookPage(self.driver)\n        try:\n            # Act\n            book_name_displayed = book_page.get_book_name()\n            # Assert\n>           self.assertNotEqual(self.config[\"book_name1\"], book_name_displayed)\nE           AssertionError: 'Leo Messi' == 'Leo Messi'\n\ntest\\book_search_test.py:42: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.book_search_test.BookSearchTest testMethod=test_search_book>\n\n    def test_search_book(self):\n        \"\"\" This test searches for a book and checks if the book title is\n        present in the book's page\"\"\"\n        logging.info(\"Test test_search_book STARTED\")\n        # Arrange\n        self.home_page.search_book_flow(self.config[\"book_name1\"])\n        results_page = SearchResultsPage(self.driver)\n        results_page.click_first_result()\n        book_page = BookPage(self.driver)\n        try:\n            # Act\n            book_name_displayed = book_page.get_book_name()\n            # Assert\n            self.assertNotEqual(self.config[\"book_name1\"], book_name_displayed)\n    \n        except AssertionError as e:\n            self.test_errors.append(e)\n>           raise AssertionError\nE           AssertionError\n\ntest\\book_search_test.py:46: AssertionError"}, "description": " This test searches for a book and checks if the book title is\n        present in the book's page", "attachments": [{"name": "log", "source": "a96c6817-363f-4e48-a668-9f2660deae3c-attachment.txt", "type": "text/plain"}], "start": 1722107337237, "stop": 1722107348011, "uuid": "23eca9b1-ee1e-450d-9b9f-1af31acd2ffe", "historyId": "eea8b134bd672ac8d028477543bcaf9a", "testCaseId": "eea8b134bd672ac8d028477543bcaf9a", "fullName": "test.book_search_test.BookSearchTest#test_search_book", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "book_search_test"}, {"name": "subSuite", "value": "BookSearchTest"}, {"name": "host", "value": "MajdHassoun"}, {"name": "thread", "value": "2132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.book_search_test"}]}